[
    {"question": "Tell me about yourself.", "answer": "I’m Yash Mishra, an AI/ML Engineer focused on building practical, user-impacting systems. I enjoy experimenting with projects that combine NLP, computer vision, and full-stack development, and I learn by iterating and deploying real solutions. My goal is to create tools that are genuinely useful while keeping both clarity and utility in mind."},
    {"question": "What motivated you to pursue AI/ML?", "answer": "I was fascinated by how data and models can solve real-world problems. Seeing a model make predictions or automate tasks in a meaningful context inspired me to learn deeply and build systems that go beyond toy examples."},
    {"question": "Describe your RAG system project.", "answer": "I built a RAG-based semantic search chatbot for project management and knowledge retrieval across 10,000+ documents. It taught me about semantic preservation, document-to-JSON pipelines, embeddings, and Docker deployment. Surprisingly, only 15-20% of work was LLM inference; the rest was data prep and workflow integration."},
    {"question": "What was the biggest challenge in your projects?", "answer": "Scaling NLP pipelines for accuracy and efficiency was challenging, especially with large, heterogeneous datasets. I learned that careful preprocessing, iterative testing, and modular design are critical for reliable production systems."},
    {"question": "What is your approach to learning new technologies?", "answer": "I dive in by building small projects, experiment, iterate, and seek feedback. I balance theory with hands-on work, and I document learnings to retain clarity and reuse solutions."},
    {"question": "What programming languages are you comfortable with?", "answer": "Python is my primary language for AI/ML and backend work. I’m also proficient in JavaScript, React.js, HTML/CSS, and familiar with Java, C, and PHP for various applications."},
    {"question": "Tell me about a time a project failed and what you learned.", "answer": "I once invested time in a project that didn’t solve a meaningful problem. I decided to halt it and refocus on high-impact work. It reinforced my value of utility — building things that genuinely help users."},
    {"question": "What frameworks do you use for ML/AI?", "answer": "I primarily use PyTorch for deep learning, Scikit-learn for classical ML, Huggingface Transformers for NLP, TensorFlow occasionally, and tools like FastAPI and Flask for serving models."},
    {"question": "Explain a technical concept to a non-technical person.", "answer": "For example, I’d explain a predictive model like a smart assistant: it looks at past data patterns to guess what’s likely next, helping make decisions faster. I avoid jargon and use relatable examples."},
    {"question": "How do you handle debugging in large systems?", "answer": "I break down the system into modules, log extensively, isolate issues step-by-step, and iteratively test components. Documentation and unit tests are critical in preventing and fixing issues efficiently."},
    {"question": "Describe your thyroid recurrence prediction project.", "answer": "It’s an end-to-end ML system predicting thyroid cancer recurrence. I handled data preprocessing, model training with MLFlow, feature importance via SHAP, and deployed it using FastAPI and Docker. The project emphasizes explainable AI in healthcare."},
    {"question": "What’s your approach to software deployment?", "answer": "I use containerization (Docker), REST APIs (FastAPI/Flask), and database integration (PostgreSQL, MS SQL). I focus on reliability, reproducibility, and maintainability."},
    {"question": "How do you ensure your ML models are explainable?", "answer": "I use techniques like SHAP and LIME to interpret predictions. I also design dashboards to visualize model behavior and communicate insights to non-technical stakeholders."},
    {"question": "What is your favorite project and why?", "answer": "I enjoy the RAG semantic search chatbot because it solved a real bottleneck — users needed quick answers across thousands of documents. It combined NLP, embeddings, and system design in a practical way."},
    {"question": "How do you prioritize tasks in projects?", "answer": "I assess impact vs. effort, focus on high-value tasks first, and break larger goals into smaller iterations. Feedback loops help me adjust priorities as needed."},
    {"question": "Describe a time you collaborated with others.", "answer": "During the financial dashboard project at Sunworks Consultants, I worked with analysts and stakeholders to integrate AI/ML modules. I ensured clear communication, modular design, and responsiveness to feedback."},
    {"question": "How do you maintain work-life balance?", "answer": "I allocate time for hobbies like swimming and personal learning. This balance helps me stay creative, focused, and avoid burnout."},
    {"question": "What are your long-term goals in AI/ML?", "answer": "To build impactful systems in healthcare, education, and developer productivity, blending research insights with practical tool-making. I want to mentor and collaborate on projects that deliver real-world value."},
    {"question": "How do you handle feedback?", "answer": "I treat feedback as data — I analyze, understand, and iterate. Constructive criticism helps me refine both technical and communication skills."},
    {"question": "What is your experience with databases?", "answer": "I’ve worked with PostgreSQL, MySQL, SQLite, and MS SQL, integrating them into backend systems, managing relational data, and supporting APIs and analytics dashboards."},
    {"question": "Tell me about your experience with web development.", "answer": "I’ve built full-stack applications using React.js, Vue.js, Flask, and FastAPI, integrating databases, REST APIs, and authentication systems, with a focus on modular and maintainable code."},
    {"question": "How do you approach system design?", "answer": "I define clear modules, ensure data flow is consistent, plan for scalability, and document assumptions. I often build small prototypes to validate concepts before full-scale implementation."},
    {"question": "How do you ensure code quality?", "answer": "I write modular, readable code with clear comments, use version control (Git), add tests where needed, and regularly refactor for maintainability."},
    {"question": "Describe a time you learned something surprising.", "answer": "While deploying the RAG system, I was surprised that most of the work was in preprocessing and integration, not LLM inference. It showed me the importance of pipelines and real-world deployment considerations."},
    {"question": "How do you stay updated with AI/ML?", "answer": "I follow research papers, open-source projects, and communities. I also experiment with new libraries and technologies in small projects to internalize concepts."},
    {"question": "What’s your approach to debugging ML models?", "answer": "I examine data quality, feature engineering, model outputs, and metrics systematically. I also visualize predictions and errors to find patterns and guide iterations."},
    {"question": "How do you handle imperfect data?", "answer": "I clean, normalize, and impute data where appropriate, but also design models to be robust. Iterative testing helps identify hidden issues or biases."},
    {"question": "How do you choose which projects to work on?", "answer": "I look for projects with meaningful impact, opportunities to learn, and alignment with my core domains like NLP, healthcare, or practical AI tools."},
    {"question": "How do you measure project success?", "answer": "By user impact, accuracy, usability, and maintainability. I value feedback and iteration as part of the measurement."},
    {"question": "What surprised you most in your ML journey?", "answer": "That deployment and integration often take more time and careful design than the core model training. Real-world systems require holistic thinking beyond just ML algorithms."},
    {"question": "How do you document your work?", "answer": "I use modular READMEs, code comments, diagrams, and JSON/structured documentation so both humans and machines can understand my projects."},
    {"question": "What advice would you give a junior engineer?", "answer": "Start building real projects, iterate fast, focus on impact, and don’t be afraid to experiment. Learning by doing is far more effective than purely consuming theory."}
]